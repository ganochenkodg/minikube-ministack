master:
  # Used for label app.kubernetes.io/component
  componentName: "jenkins-master"
  image: "jenkins/jenkins"
  tag: "lts"
  adminPassword: "admin"
  hostNetworking: true
  jobs:
    Test_docker: |-
      <?xml version='1.1' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.33">
        <actions>
          <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
          <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
            <jobProperties/>
            <triggers/>
            <parameters/>
            <options/>
          </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
        </actions>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties/>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
          <script>pipeline {
        agent {
          kubernetes {
            // this label will be the prefix of the generated pod&apos;s name
            label &apos;jenkins-docker-agent&apos;
            yaml &quot;&quot;&quot;
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          component: ci
      spec:
        containers:
          - name: docker
            image: docker
            command:
              - cat
            tty: true
            volumeMounts:
              - mountPath: /var/run/docker.sock
                name: docker-sock
        volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
      &quot;&quot;&quot;
          }
        }
      
        stages {
          stage(&apos;Test docker&apos;) {
            steps {
              container(&apos;docker&apos;) {
                sh &quot;docker version &amp;&amp; docker run hello-world&quot;
              }
            }
          }
        }
      }</script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
    Deploy_MyApp: |-
      <?xml version='1.1' encoding='UTF-8'?>
         <flow-definition plugin="workflow-job@2.38">
           <actions>
             <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
             <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
               <jobProperties/>
               <triggers/>
               <parameters/>
               <options/>
             </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
           </actions>
           <description>Deploy nodejs app to prod or dev environment.</description>
           <keepDependencies>false</keepDependencies>
           <properties>
             <hudson.model.ParametersDefinitionProperty>
               <parameterDefinitions>
                 <hudson.model.ChoiceParameterDefinition>
                   <name>ENV</name>
                   <description>where to deploy</description>
                   <choices class="java.util.Arrays$ArrayList">
                     <a class="string-array">
                       <string>dev</string>
                       <string>prod</string>
                     </a>
                   </choices>
                 </hudson.model.ChoiceParameterDefinition>
               </parameterDefinitions>
             </hudson.model.ParametersDefinitionProperty>
           </properties>
           <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
             <script>pipeline {
           agent {
             kubernetes {
               label &apos;jenkins-docker-agent&apos;
               yaml &quot;&quot;&quot;
         apiVersion: v1
         kind: Pod
         metadata:
           labels:
             component: ci
         spec:
           containers:
             - name: docker
               image: docker
               command: [&quot;cat&quot;]
               tty: true
               volumeMounts:
                 - mountPath: /var/run/docker.sock
                   name: docker-sock
             - name: kubectl
               image: starudream/kubectl
               command: [&quot;cat&quot;]
               tty: true
               volumeMounts:
                 - mountPath: /root/.kube/config
                   name: kube-config
                 - mountPath: /root/.minikube/
                   name: minikube-config
           volumes:
             - name: docker-sock
               hostPath:
                 path: /var/run/docker.sock
             - name: kube-config
               hostPath:
                 path: /root/.kube/config
             - name: minikube-config
               hostPath:
                 path: /root/.minikube/
         &quot;&quot;&quot;
             }
           }
         
           stages {
             stage(&apos;Git checkout&apos;) {
               steps {
                 git url: &apos;https://github.com/ganochenkodg/minikube-ministack.git&apos;
               }
             }
             stage(&apos;Build docker&apos;) {
               steps {
                 container(&apos;docker&apos;) {
                   script {
                     def BuildTag = &quot;master&quot;
                     if (params.ENV.equals(&quot;dev&quot;)) {
                         BuildTag = &quot;staging&quot;
                     }
                     sh &quot;docker build -t localhost:5000/myapp:${BuildTag} ./app&quot;
                     sh &quot;docker push localhost:5000/myapp&quot;
                   }
                 }
               }
             }
             stage(&apos;Deploy to env&apos;) {
               steps {
                 container(&apos;kubectl&apos;) {
                   script {
                     sh &quot;kubectl rollout restart deploy ${params.ENV}-app -n ${params.ENV}&quot;
                     sh &quot;kubectl rollout status deploy ${params.ENV}-app -n ${params.ENV}&quot;
                   }
                 }
               }
             }
           }
         }
         </script>
             <sandbox>true</sandbox>
           </definition>
           <triggers/>
           <disabled>false</disabled>
         

agent:
  enabled: true
  image: "odavid/jenkins-jnlp-slave"
  tag: "3.29-1-15-alpine"
  hostNetworking: true

persistence:
  enabled: true
  existingClaim: "jenkins-pvc"
